#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>

pid_t monitor_pid = -1;

void start_monitor() {
    if (monitor_pid != -1) {
        printf("Monitorul rulează deja.\n");
        return;
    }

    monitor_pid = fork();
    if (monitor_pid == 0) {
        // În copil — pornim monitorul
        execl("./monitor", "./monitor", NULL);
        perror("Eroare la lansarea monitorului");
        exit(-1);
    } else if (monitor_pid > 0) {
        printf("Monitor pornit cu PID %d.\n", monitor_pid);
    } else {
        perror("Eroare la fork");
    }
}

void stop_monitor() {
    if (monitor_pid == -1) {
        printf("Nu există niciun monitor activ.\n");
        return;
    }

    kill(monitor_pid, SIGTERM);  // Cerem monitorului să se închidă

    int status;
    waitpid(monitor_pid, &status, 0);  // Așteptăm să se termine

    printf("Monitorul s-a închis cu status %d.\n", WEXITSTATUS(status));
    monitor_pid = -1;
}

void send_signal(int signal) {
    if (monitor_pid == -1) {
        printf("Monitorul nu este pornit.\n");
        return;
    }
    kill(monitor_pid, signal);
}

int main() {
    char command[256];

    while (1) {
        printf("> ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = 0;  // elimină \n

        if (strcmp(command, "start_monitor") == 0) {
            start_monitor();
        } else if (strcmp(command, "list_hunts") == 0) {
            send_signal(SIGUSR1);
        } else if (strcmp(command, "list_treasures") == 0) {
            send_signal(SIGUSR2);
        } else if (strcmp(command, "stop_monitor") == 0) {
            stop_monitor();
        } else if (strcmp(command, "exit") == 0) {
            if (monitor_pid != -1) {
                printf("Eroare: monitorul încă rulează.\n");
            } else {
                printf("Ieșire program.\n");
                break;
            }
        } else {
            printf("Comandă necunoscută.\n");
        }
    }

    return 0;
}
